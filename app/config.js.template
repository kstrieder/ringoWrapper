/**
 * @license
 * (c) shogano.com
 * created: 1/1/18, 2:34 PM

 * configuration of base parameters
 * effective configuration will be autogenerated from this template
 * do not put system specific configuration values in this file
 * and use the local baseConfiguration file

 * auto generated $<DATESTRING>

 */

const   configData = {
            "HttpServer" : {
                "listenIp" : "$<LISTEN_IP>",
                "listenPort" : "$<LISTEN_PORT>",
                "baseUrl" : "$<BASE_URL>",
                "templates" : "templates/", // directory for templates (to be consumed by handlers, not open to direct http)
                "static" : { mount : "/_res", directory : "./_res", allowListing : true}, // the static ressource directories
                "rootLevelMappings" : {
                    // a root level mapping maps a root-level element to its respective location, something like a simple rewrite rule
                    // when complex operations are required, use the frontend reverse proxy to configure those
                    "favicon.ico" : "/_res/favicon.ico"
                },
                "indexPage" : "default/index.html", // what page to redirect to, when a root-request is performed (URL ends after host/port)
                "Cache" : { // define cache time in seconds, defaults to 0
                    "image/png" : 3600,
                    "text/css" : 60,
                    "text/javascript" : 60,
                    "image/jpg" : 3600,
                    "text/html" : 15,
                    "text/plain" : 3600
                }
            },
            "handler" : {
                // a default handler is mandatory!
                // all others are optional
                // a handler is available on URL-root, and the corresponding implementation
                // is then called with the remainder of the URL as parameters
                "default" : "handler/templateHandler.js",
            }
        };

/**
 * 
 * @param aspect - extract an entity of the configuration. You can specify which entity, by using a "." separated address (e.g. "HttpServer.rootLevelMappings")
 * @returns {object}
 */
module["exports"] = function (aspect) {
    let pointer = configData, i, aspects = typeof(aspect) === "string" ? aspect.split(".") : [];

    while (aspects.length >0) {
        i=aspects.shift();
        if (typeof(pointer[i]) !== "undefined") {
            pointer=pointer[i];
        }
    }
    return pointer;
};

