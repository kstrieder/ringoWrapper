#!/bin/bash
#
# finds all files ending with .template and generates a file at same location
# without .template suffix based on replacing $<PATTERN> with variable content of PATTERN
###########################################################################################
### configuration

### end of configuration
###########################################################################################
###########################################################################################

export APP_HOME="`cd $(dirname ${0})/.. ; pwd`"

# source potential configuration files
F_FLAG=0
CONFIG_FILE_LIST="baseConfiguration baseConfiguration.`hostname`"
for _config_iterator in ${CONFIG_FILE_LIST}
do
    if [ -s "${APP_HOME}/${_config_iterator}" ]
    then
        echo "Sourcing configuration from \"${_config_iterator}\""
        . "${APP_HOME}/${_config_iterator}"
        F_FLAG=1
    fi
done

if [ ${F_FLAG} = "0" ]
then
    echo "No configurations found. Exiting."
    exit 1
fi

# identify plattform
THIS_MACHINE=`(uname -m) 2>/dev/null` || THIS_MACHINE="unknown"
THIS_SYSTEM=`(uname -s) 2>/dev/null` || THIS_SYSTEM="unknown"
# default to 64bit machine
CPUBITS=64

case "${THIS_SYSTEM}-${THIS_MACHINE}" in
    Linux-i?86)
        CPUBITS=32
        ;;
esac

searchJava () {
    ### find JRE install director

    for _testdir in ${JAVA_HOME_CANDIDATES}
    do
    if  [ -d "${_testdir}" ] &&
        [ -x "${_testdir}/bin/java" ] &&
        ${_testdir}/bin/java -d${1} -version >/dev/null 2>&1
    then
        echo "${_testdir}"
        return
    fi
    done
}

doReplace() {
        _CFILE="${1}"
        _OUTDIR=`dirname "${_CFILE}"` 
        _OUTFILE="${_OUTDIR}"/`basename "${_CFILE}" .template`
        _GETGITVERSION=`( cd "${_OUTDIR}" ; git rev-parse HEAD 2>/dev/null)`
        unset GITVERSION
        unset GITSIGNATURE
        if [ "${_GETGITVERSION}" ]
        then
            export GITVERSION="${_GETGITVERSION}"
            export GITSIGNATURE=`echo ${GITVERSION} | cut -c1-6`
        fi
        echo "${_OUTFILE} <== ${_CFILE}"
        awk '{while(match($0,"[$]<[^>]*>")){var=substr($0,RSTART+2,RLENGTH-3);gsub("[$]<"var">",ENVIRON[var])}}1' ${_CFILE} >${_OUTFILE}
}

export DATESTRING=`date +"%Y-%m-%d %T %Z"`

if [ "${JAVA_HOME}" = "__autolocate__" ]
then
    export JAVA_HOME=`searchJava ${CPUBITS}`
fi

if  [ -z "${JAVA_HOME}" ] ||
    ! ${JAVA_HOME}/bin/java -d${CPUBITS} -version >/dev/null 2>&1
then
  echo "Can't locate a Java install or it is not for a ${CPUBITS}-bit plattform." >&2
  echo "Please ensure, that Java is installed." >&2
  echo "If Java is installed, configure its location manually in the file baseConfiguration.`hostname`" >&2
  exit 1
fi

echo
echo "JAVA: Using ${JAVA_HOME}/bin/java in ${CPUBITS}-bit version."
echo

export __DISCLAIMER__="*** !!! AUTOGENERATED FILE -- Edit .template file instead !!! ***"

echo "Searching for .template files and generating local variants..."
for _CFILE in `find "${APP_HOME}/" -type f -name "*.template"`
do
    if [ -e "${_CFILE}.rpmsave" ] || [ -e "${_CFILE}.rpmnew" ]
    then
        echo "WARNING !!! -- File ${_CFILE} has a potential local conflict with rpm content !!!"
    fi
    doReplace "${_CFILE}"
done

# run build for reactApp
if [ -n "${REACT_HOME}" ] && npm -version >/dev/null 2>&1
then
    pushd "${REACT_HOME}"
    if [ "${1}" = "build" ] || [ ! -e package-lock.json ] || [ -n "`find src/ -cnewer package-lock.json`" ]
    then
        npm run build
    fi
    popd
fi
