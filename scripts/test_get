#!/usr/bin/env bash

export APP_HOME="`cd $(dirname ${0})/.. ; pwd`"

# source potential configuration files
F_FLAG=0
CONFIG_FILE_LIST="baseConfiguration baseConfiguration.`hostname`"
for _config_iterator in ${CONFIG_FILE_LIST}
do
    if [[ -s "${APP_HOME}/${_config_iterator}" ]]
    then
        echo "Sourcing additional ${_config_iterator}"
        . "${APP_HOME}/${_config_iterator}"
        F_FLAG=1
    fi
done

if [[ ${F_FLAG} = "0" ]]
then
    echo "No configurations found. Exiting."
    exit 1
fi


if [[ "0${1}" -gt 0 ]]
then
	TEST_GET_COUNT="${1}"
fi

evaluateUrl () {
   
    export LC_NUMERIC="en_US.UTF-8"
    
    echo "Testing ${1} calls of ${2}" 
    ( 
        for i in `seq 1 ${1}`
        do
            myURL=`echo "${2}" | sed -e "s/##/${i}/g"`
            curl -o /dev/null  -s -w "*** %{time_total} %{size_download} %{http_code} %{url_effective}\n" "${myURL}"
            if [[ $? -ne 0 ]]
            then
                echo "Call to ${myURL} failed." >&2
                exit 1
            fi
        done
    ) | grep "***"  | cut -f2 -d" " | sort -g | awk '
      BEGIN {
        c = 0;
        sum = 0;
      }
      $1 ~ /^[0-9]*(\.[0-9]*)?$/ {
        a[c++] = $1;
        sum += $1;
      }
      END {
        ave = sum / c;
        if( (c % 2) == 1 ) {
          median = a[ int(c/2) ];
        } else {
          median = ( a[c/2] + a[c/2-1] ) / 2;
        }
        OFS="\t";
        print "Sum:", sum, "\nCount:", c, "\nAvrg:", ave, "\nMedian:", median, "\nMin:", a[0], "\nMax:", a[c-1];
        if( median > 0.015 ) {
            print "ALARM, Median exceeds 15 ms with ", (median * 1000), " milliseconds.";
        }
      }
    '
    echo
}

for uriElement in ${TEST_GET_URIS}
do
    evaluateUrl ${TEST_GET_COUNT} "${BASE_URL}${uriElement}"
done
